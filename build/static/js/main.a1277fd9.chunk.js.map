{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","actions.js","api/api.js","components/Header.js","containers/App.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robot","index","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","console","log","React","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","Header","memo","connect","searchField","searchRobots","isPending","onSearchChange","event","text","target","value","onRequestRobots","useEffect","filterRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a1277fd9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"bg-light-green dib tc br3 pa3 ma2 grow shadow-2\">\n      <img alt=\"robot\" src={`https://robohash.org/${id}?300x300`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport Card from \"./Card.js\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <Fragment>\n      {robots.map((robot, index) => {\n        return (\n          <Card\n            key={robot.id}\n            id={robot.id}\n            name={robot.name}\n            email={robot.email}\n          />\n        );\n      })}\n    </Fragment>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div>\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{ overflowY: \"scroll\", border: \"1px solid black\", height: \"80vh\" }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\n\n//* This component is kept as a class rather than using hooks since componentDidCatch does not have an equivalent hook yet.\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. Something broke</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { apiCall } from \"./api/api\";\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  apiCall(\"https://jsonplaceholder.typicode.com/users\")\n    .then((data) => {\n      console.log(\"data\", data);\n      return dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data });\n    })\n    .catch((error) => {\n      console.log(\"error\", error);\n      return dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\n    });\n};\n","export const apiCall = (link) =>\n  fetch(link).then((response) => response.json());\n","import React from \"react\";\n\nconst Header = React.memo((props) => {\n  console.log(\"Header update\");\n  return <h1 className=\"f2\">Robofriends</h1>;\n});\n\nexport default Header;\n","import React, { useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport { requestRobots, setSearchField } from \"../actions\";\nimport { connect } from \"react-redux\";\nimport \"./App.css\";\nimport Header from \"../components/Header\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nfunction App(props) {\n  const { searchField, onSearchChange, robots, isPending, onRequestRobots } =\n    props;\n\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  const filterRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return isPending ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filterRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\nexport const searchRobots = (state = initialStateSearch, action) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\nexport const requestRobots = (state = initialStateRobots, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, isPending: false, robots: action.payload };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, isPending: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport { Provider } from \"react-redux\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger)); // , logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\nreportWebVitals();\n"],"sourceRoot":""}